"""Telegram bot –¥–ª—è –ø–æ–º–æ—â–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –≤ –≤—ã–±–æ—Ä–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û."""

import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime

from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram.constants import ParseMode
from loguru import logger

from .config import settings
from .database import db_manager, User, Conversation
from .rag import rag_system
from .utils import format_program_info, format_subjects_list


class ITMOBot:
    """Telegram –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.application = None
        self.user_states: Dict[int, Dict[str, Any]] = {}
        
        self._init_bot()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞."""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(settings.telegram_bot_token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            logger.success("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("programs", self.programs_command))
        self.application.add_handler(CommandHandler("reset", self.reset_command))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username
            first_name = update.effective_user.first_name
            last_name = update.effective_user.last_name
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = db_manager.get_user_by_telegram_id(user_id)
            if not db_user:
                db_user = db_manager.create_user(
                    telegram_id=user_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            else:
                db_manager.update_user_activity(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            conversation = db_manager.create_conversation(db_user.id)
            self.user_states[user_id] = {
                'conversation_id': conversation.id,
                'step': 'greeting'
            }
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = f"""
üéì –ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ò–¢–ú–û.

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üìö –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" –∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
üéØ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
üìã –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ —É—á–µ–±–Ω–æ–º –ø–ª–∞–Ω–µ
üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
üöÄ –ü–æ–Ω—è—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã

–ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
/programs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
            """
            
            keyboard = [
                ["üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "‚ùì –ü–æ–º–æ—â—å"],
                ["ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                welcome_text.strip(),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            db_manager.add_message(
                conversation_id=conversation.id,
                role='assistant',
                content=welcome_text.strip(),
                telegram_message_id=update.message.message_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ
/programs - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã  
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
"–ö–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ò–ò –∏ AI Product?"
"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –†–§?"
"–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑—É—á–∞—é—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò?"
"–ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã?"

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! üöÄ
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def programs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /programs."""
        try:
            programs = db_manager.get_all_programs()
            
            if not programs:
                await update.message.reply_text("–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
            keyboard = []
            for program in programs:
                button_text = f"üìö {program.name}"
                callback_data = f"program_{program.id}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
            
            keyboard.append([InlineKeyboardButton("üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="compare_programs")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /programs: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º.")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset."""
        user_id = update.effective_user.id
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        if user_id in self.user_states:
            conversation_id = self.user_states[user_id].get('conversation_id')
            if conversation_id:
                db_manager.end_conversation(conversation_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states.pop(user_id, None)
        
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
        try:
            query = update.callback_query
            await query.answer()
            
            callback_data = query.data
            
            if callback_data.startswith("program_"):
                # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                program_id = int(callback_data.split("_")[1])
                await self._show_program_details(query, program_id)
                
            elif callback_data == "compare_programs":
                # –ù–∞—á–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
                await self._start_program_comparison(query)
                
            elif callback_data.startswith("subjects_"):
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
                program_id = int(callback_data.split("_")[1])
                await self._show_program_subjects(query, program_id)
                
            elif callback_data.startswith("compare_"):
                # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
                program_id = int(callback_data.split("_")[1])
                await self._add_to_comparison(query, program_id)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _show_program_details(self, query, program_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        try:
            program = db_manager.get_program_by_id(program_id)
            if not program:
                await query.edit_message_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SQLAlchemy –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            program_data = {
                'name': program.name,
                'description': program.description,
                'duration': program.duration,
                'format': program.format,
                'language': program.language,
                'cost_russian': program.cost_russian,
                'cost_foreign': program.cost_foreign,
                'career_prospects': program.career_prospects,
                'subjects': [
                    {
                        'name': s.name,
                        'semester': s.semester,
                        'credits': s.credits,
                        'hours': s.hours,
                        'type': s.subject_type
                    } for s in program.subjects
                ]
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = format_program_info(program_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data=f"subjects_{program_id}")],
                [InlineKeyboardButton("ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"ask_{program_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_programs")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                info_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    
    async def _show_program_subjects(self, query, program_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        try:
            program = db_manager.get_program_by_id(program_id)
            if not program or not program.subjects:
                await query.edit_message_text("–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            subjects_data = [
                {
                    'name': s.name,
                    'semester': s.semester,
                    'credits': s.credits,
                    'hours': s.hours,
                    'type': s.subject_type
                } for s in program.subjects
            ]
            
            subjects_text = f"üìö **–ü—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã {program.name}**\n\n"
            subjects_text += format_subjects_list(subjects_data, limit=15)
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                subjects_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_manager.update_user_activity(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_states:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                db_user = db_manager.get_user_by_telegram_id(user_id)
                if db_user:
                    conversation = db_manager.create_conversation(db_user.id)
                    self.user_states[user_id] = {
                        'conversation_id': conversation.id,
                        'step': 'conversation'
                    }
                else:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                    return
            
            conversation_id = self.user_states[user_id]['conversation_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_manager.add_message(
                conversation_id=conversation_id,
                role='user',
                content=message_text,
                telegram_message_id=update.message.message_id
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if message_text in ["üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "üìã –ü—Ä–æ–≥—Ä–∞–º–º—ã"]:
                await self.programs_command(update, context)
                return
            elif message_text in ["‚ùì –ü–æ–º–æ—â—å", "üÜò –ü–æ–º–æ—â—å"]:
                await self.help_command(update, context)
                return
            elif message_text == "ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç":
                await self._handle_program_question("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", update, conversation_id)
                return
            elif message_text == "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏":
                await self._handle_program_question("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", update, conversation_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG
            await self._handle_rag_question(message_text, update, conversation_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
    
    async def _handle_program_question(self, program_name: str, update: Update, conversation_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è RAG
            question = f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ {program_name}"
            
            await self._handle_rag_question(question, update, conversation_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ {program_name}: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.")
    
    async def _handle_rag_question(self, question: str, update: Update, conversation_id: int) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É."""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await update.message.chat.send_action("typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
            answer, sources = rag_system.ask(question)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
            if len(answer) > 4000:
                answer = answer[:4000] + "..."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(answer, parse_mode=ParseMode.MARKDOWN)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
            db_manager.add_message(
                conversation_id=conversation_id,
                role='assistant',
                content=answer,
                message_metadata={'sources': len(sources)}
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RAG –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫."
            )
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            commands = [
                BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
                BotCommand("programs", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"),
                BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
                BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
            ]
            
            await self.application.bot.set_my_commands(commands)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        if self.application:
            self.application.stop()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    from .utils import setup_logging
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging("bot.log")
    settings.ensure_directories()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    db_manager.create_tables()
    
    # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –≤ RAG
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º...")
    rag_system.index_programs()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = ITMOBot()
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main()) 