"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

import sys
from pathlib import Path
from typing import Optional

from loguru import logger

from .config import settings


def setup_logging(log_file: Optional[str] = None) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        log_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        level=settings.log_level,
        colorize=True,
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
    if log_file:
        logs_path = Path(settings.logs_dir) / log_file
    else:
        logs_path = Path(settings.logs_dir) / "app.log"
    
    logger.add(
        str(logs_path),
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        level="DEBUG",
        rotation="10 MB",
        retention="1 month",
        compression="zip",
    )
    
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –§–∞–π–ª: {logs_path}")


def format_program_info(program_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        program_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    info_parts = []
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if program_data.get("name"):
        info_parts.append(f"üìö **{program_data['name']}**\n")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if program_data.get("duration"):
        info_parts.append(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program_data['duration']}")
    
    if program_data.get("format"):
        info_parts.append(f"üìñ –§–æ—Ä–º–∞—Ç: {program_data['format']}")
    
    if program_data.get("language"):
        info_parts.append(f"üåê –Ø–∑—ã–∫: {program_data['language']}")
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å
    if program_data.get("cost_russian"):
        info_parts.append(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å (–≥—Ä–∞–∂–¥–∞–Ω–µ –†–§): {program_data['cost_russian']:,} —Ä—É–±.")
    
    if program_data.get("cost_foreign"):
        info_parts.append(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å (–∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü—ã): {program_data['cost_foreign']:,} —Ä—É–±.")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    if program_data.get("description"):
        desc = program_data["description"]
        if len(desc) > 500:
            desc = desc[:500] + "..."
        info_parts.append(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}")
    
    # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    if program_data.get("career_prospects"):
        career = program_data["career_prospects"]
        if len(career) > 300:
            career = career[:300] + "..."
        info_parts.append(f"\nüöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:\n{career}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if program_data.get("subjects"):
        subjects_count = len(program_data["subjects"])
        info_parts.append(f"\nüìä –í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {subjects_count}")
    
    return "\n".join(info_parts)


def format_subjects_list(subjects: list, limit: int = 10) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        subjects: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not subjects:
        return "–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    formatted_subjects = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
    by_semester = {}
    for subject in subjects:
        semester = subject.get("semester", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if semester not in by_semester:
            by_semester[semester] = []
        by_semester[semester].append(subject)
    
    for semester in sorted(by_semester.keys()):
        semester_subjects = by_semester[semester]
        formatted_subjects.append(f"\n**–°–µ–º–µ—Å—Ç—Ä {semester}:**")
        
        for subject in semester_subjects[:limit]:
            name = subject.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            credits = subject.get("credits", 0)
            hours = subject.get("hours", 0)
            subject_type = subject.get("type", "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞")
            
            formatted_subjects.append(
                f"‚Ä¢ {name} ({credits} –∑.–µ., {hours} —á.) - {subject_type}"
            )
        
        if len(semester_subjects) > limit:
            remaining = len(semester_subjects) - limit
            formatted_subjects.append(f"... –∏ –µ—â–µ {remaining} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    
    return "\n".join(formatted_subjects)


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    import re
    
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_name = re.sub(r'[<>:"/\\|?*]', '', filename)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'\s+', '_', clean_name)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(clean_name) > 200:
        clean_name = clean_name[:200]
    
    return clean_name


def extract_keywords(text: str) -> list:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    """
    import re
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()
    
    # –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
    words = re.findall(r'\b[–∞-—è—ë]+\b', text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {
        '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–æ–±',
        '–∏', '–∏–ª–∏', '–Ω–æ', '–∞', '–¥–∞', '–Ω–µ—Ç', '–Ω–µ', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ',
        '—ç—Ç–æ', '—Ç–æ', '—Ç–∞–∫', '—É–∂–µ', '–µ—â–µ', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—ã–ª–∏'
    }
    
    keywords = [word for word in words if len(word) > 2 and word not in stop_words]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    unique_keywords = []
    for keyword in keywords:
        if keyword not in seen:
            seen.add(keyword)
            unique_keywords.append(keyword)
    
    return unique_keywords[:20]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 20 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ 