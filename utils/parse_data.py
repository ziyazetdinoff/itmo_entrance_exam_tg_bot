#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª—ã —Å —É—á–µ–±–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent / "src"))

from loguru import logger
from parser import ITMOParser

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        level="INFO"
    )
    logger.add(
        "logs/parser.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
        level="DEBUG",
        rotation="10 MB"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    Path("logs").mkdir(exist_ok=True)
    setup_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û")
    logger.info("–¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
    logger.info("  ‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    logger.info("  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        parser = ITMOParser(output_dir="./data")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        programs = parser.parse_all_programs()
        
        if not programs:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            return 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        parser.save_programs_data(programs)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(programs)}")
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê")
        print("="*60)
        
        for i, program in enumerate(programs, 1):
            print(f"\n{i}. {program.name}")
            print(f"   ID: {program.id}")
            print(f"   URL: {program.url}")
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.duration}")
            print(f"   –§–æ—Ä–º–∞—Ç: {program.format}")
            print(f"   –Ø–∑—ã–∫: {program.language}")
            print(f"   PDF URL: {program.pdf_url}")
            print(f"   PDF —Ñ–∞–π–ª: {program.pdf_path}")
            
            if program.description:
                desc_preview = program.description[:150] + "..." if len(program.description) > 150 else program.description
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc_preview}")
        
        print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ./data/")
        logger.success("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 